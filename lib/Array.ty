import Trinity.ArrayUtils

module Trinity
    class Array
        def +(other)
            newArray = copyOf(this)
            if other.isInstance(Array)
                newArray.addAll(other)
            else
                newArray.add(other)
            newArray

        def native [](index)

        def native add(value)

        def addAll(array)
            array.each() |e|
                add(e)

        def native insert(index, value)

        def native remove(index)

        def removeObject(value)
            flag = false
            for i = 0; i < length(); i += 1
                if this[i] == value
                    remove(i)
                    i -= 1
                    flag = true
            flag

        def native clear

        def native length

        def toString
            '[' + join(', ') + ']'

        def each(&block)
            iterator().iterate(block)

        def iterator
            Iterator.new(this)

        def sum
            sum = 0
            each() |e|
                sum += e
            sum

        def join(delimiter = ' ')
            str = ''
            for i = 0; i < length(); i += 1
                str += this[i]
                if i < length() - 1
                    str += delimiter
            str

        def ==(other)
            if length() != other.length()
                return false
            for i = 0; i < length(); i += 1
                if this[i] != other[i]
                    return false
            return true

        def native static copyOf(array)

        def static forSize(size)
            array = []
            if size == 0
                return array
            (1..size).each() |e|
                array.add(nil)
            array
