module Trinity
    class Range
        def initialize(begin, end, excludeEnd = false)
            @begin = begin
            @end = end
            @excludeEnd = excludeEnd

        def getBegin
            @begin

        def getEnd
            @end

        def getExcludeEnd
            @excludeEnd

        def each(&block)
            if !getBegin().respondsTo('next')
                throw(Trinity.Errors.InvalidTypeError.new("Instances of '" + getBegin().getClass() + "' cannot be used to iterate over a " + getClass() + " instance because it does not define a 'next()' method."))

            if block?
                next = getBegin()
                while next != getEnd()
                    &block.call(next)
                    next = next.next()
                if !getExcludeEnd()
                    &block.call(next)

        def ==(other)
            if !other.isInstance(Range)
                return false
            getBegin() == other.getBegin() && getEnd() == other.getEnd() && getExcludeEnd() == other.getExcludeEnd()

        def toString
            str = '(' + getBegin()
            if getExcludeEnd()
                str += '...'
            else
                str += '..'
            str += getEnd() + ')'
            str
