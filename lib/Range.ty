module Trinity
    class Range
        private
            var begin, end, excludeEnd

        public
            def initialize(begin, end, excludeEnd = false)
                this.begin = begin
                this.end = end
                this.excludeEnd = excludeEnd

                if(!begin.isInstance(Consecutive) || !end.isInstance(Consecutive))
                    throw(Trinity.Errors.InvalidTypeError.new("Values in a range must implement " + Consecutive.class.toString() + "."))

            def getBegin
                begin

            def getEnd
                end

            def getExcludeEnd
                excludeEnd

            def each(&block)
                if block?
                    next = getBegin()
                    while next != getEnd()
                        block.call(next)
                        if block.isBroken()
                            break
                        next = next.next()
                    if !block.isBroken() && !getExcludeEnd()
                        block.call(next)

            def ==(other)
                if !other.isInstance(Range)
                    return false
                getBegin() == other.getBegin() && getEnd() == other.getEnd() && getExcludeEnd() == other.getExcludeEnd()

            def toString
                str = '(' + getBegin()
                if getExcludeEnd()
                    str += '...'
                else
                    str += '..'
                str += getEnd() + ')'
                str
