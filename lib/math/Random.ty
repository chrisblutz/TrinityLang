module Trinity
    class Random
        def static next
            nextFloat()

        def native static nextInt(origin = Int.MIN_VALUE, bound = Int.MAX_VALUE)

        def native static nextLong(origin = Long.MIN_VALUE, bound = Long.MAX_VALUE)

        def native static nextFloat(origin = 0, bound = 1)

        def static choose(amount, array, allowRepetition = false)
            if array.isInstance(Range)
                array = array.toArray()

            if !allowRepetition && amount > array.length()
                throw(Trinity.Errors.InvalidArgumentError.new('Sample size must not exceed population size.'))
            elsif amount == 0
                return []

            result = []
            chosen = []
            (1..amount).each()
                i = nextInt(0, array.length())
                if !allowRepetition
                    while chosen.contains(i)
                        i = nextInt(0, array.length())
                chosen << i
                result << array[i]
            result
